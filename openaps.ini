[vendor "mmeowlink.vendors.mmeowlink"]
path = .
module = mmeowlink.vendors.mmeowlink

[device "pump"]
vendor = mmeowlink.vendors.mmeowlink
extra = pump.ini

[device "cgm"]
vendor = openaps.vendors.dexcom
extra = cgm.ini

[device "oref0"]
vendor = openaps.vendors.process
extra = oref0.ini

[device "detect-sensitivity"]
vendor = openaps.vendors.process
extra = detect-sensitivity.ini

[device "get-profile"]
vendor = openaps.vendors.process
extra = get-profile.ini

[device "calculate-iob"]
vendor = openaps.vendors.process
extra = calculate-iob.ini

[device "determine-basal"]
vendor = openaps.vendors.process
extra = determine-basal.ini

[report "raw-pump/bg-targets-raw.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "settings/bg-targets.json"]
device = units
to = mg/dL
use = bg_targets
input = raw-pump/bg-targets-raw.json
reporter = JSON

[report "raw-pump/insulin-sensitivities-raw.json"]
device = pump
use = read_insulin_sensitivities
reporter = JSON

[report "settings/insulin-sensitivities.json"]
device = units
to = mg/dL
use = insulin_sensitivities
input = raw-pump/insulin-sensitivities-raw.json
reporter = JSON

[report "raw-pump/clock-raw.json"]
device = pump
use = read_clock
reporter = JSON

[report "monitor/clock.json"]
date = None
use = clock
adjust = missing
reporter = JSON
device = tz
input = raw-pump/clock-raw.json
astimezone = False

[report "monitor/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "oref0-predict/oref0.json"]
use = shell
oref0-iob = oref0-monitor/iob.json
temp-basal = monitor/temp-basal-status.json
reporter = text
json_default = True
oref0-profile = oref0-monitor/profile.json
device = determine-basal
remainder = 
glucose = monitor/glucose.json

[report "raw-pump/pump-history-raw.json"]
hours = 8.0
device = pump
use = iter_pump_hours
reporter = JSON

[report "monitor/pump-history.json"]
date = timestamp dateString start_at end_at created_at
use = rezone
adjust = missing
reporter = JSON
device = tz
input = raw-pump/pump-history-raw.json
astimezone = False

[report "model.json"]
device = pump
use = model
reporter = JSON

[report "monitor/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "monitor/status.json"]
device = pump
use = read_status
reporter = JSON

[report "monitor/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "oref0-enacted/enacted-temp-basal.json"]
device = pump
input = oref0-predict/oref0.json
use = set_temp_basal
reporter = JSON

[report "settings/settings.json"]
device = oref0
remainder = copy-fresher raw-pump/settings.json
use = shell
json_default = True
reporter = JSON

[report "raw-pump/settings.json"]
device = pump
use = read_settings
reporter = JSON

[report "settings/selected-basal-profile.json"]
device = oref0
remainder = copy-fresher raw-pump/selected-basal-profile.json
use = shell
json_default = True
reporter = JSON

[report "raw-pump/selected-basal-profile.json"]
device = pump
use = read_selected_basal_profile
reporter = JSON

[report "raw-pump/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "raw-pump/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "raw-pump/status.json"]
device = pump
use = read_status
reporter = JSON

[report "raw-pump/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "oref0-monitor/profile.json"]
insulin-sensitivities = settings/insulin-sensitivities.json
use = shell
settings = settings/settings.json
reporter = text
json_default = True
device = get-profile
bg-targets = settings/bg-targets.json
basal-profile = settings/selected-basal-profile.json
max-iob = max-iob.json
remainder = 

[report "oref0-monitor/iob.json"]
use = shell
clock = monitor/clock.json
reporter = text
json_default = True
pump-history = monitor/pump-history.json
oref0-profile = oref0-monitor/profile.json
device = calculate-iob
remainder = 

[device "units"]
vendor = openaps.vendors.units
extra = units.ini

[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[device "tz"]
vendor = openapscontrib.timezones
extra = tz.ini

[device "ns"]
vendor = openaps.vendors.process
extra = ns.ini

[report "nightscout/recent-treatments.json"]
oper = format-recent-history-treatments
use = shell
reporter = JSON
json_default = True
device = ns
remainder = monitor/pump-history.json model.json

[report "nightscout/uploaded.json"]
oper = upload-non-empty-treatments
use = shell
reporter = JSON
json_default = True
device = ns
remainder = nightscout/recent-treatments.json

[alias]
rm-warmup = ! bash -c "rm -f model.json monitor/clock.json > /dev/null"
warmup = report invoke model.json raw-pump/clock-raw.json monitor/clock.json
fail-warmup = ! bash -c "echo PREFLIGHT FAIL ERROR $(date); exit 1"
preflight = ! bash -c "(openaps rm-warmup; echo PREFLIGHT ) && openaps warmup 2>&1 >/dev/null && grep -q T monitor/clock.json && echo PREFLIGHT OK || openaps fail-warmup"
monitor-cgm = report invoke raw-cgm/glucose-raw.json monitor/glucose.json
monitor-pump-history = report invoke raw-pump/pump-history-raw.json monitor/pump-history.json
get-basal-status = report invoke monitor/temp-basal-status.json
get-pump-details = report invoke monitor/reservoir.json monitor/status.json monitor/battery.json
get-settings = report invoke raw-pump/bg-targets-raw.json settings/bg-targets.json raw-pump/insulin-sensitivities-raw.json settings/insulin-sensitivities.json raw-pump/selected-basal-profile.json settings/selected-basal-profile.json raw-pump/settings.json settings/settings.json
gather-pump-data = ! bash -c "openaps get-basal-status; openaps get-pump-details; openaps monitor-pump-history;  openaps get-settings"
gather-clean-data = ! bash -c "openaps monitor-cgm && openaps gather-pump-data"
do-oref0 = report invoke oref0-monitor/profile.json oref0-monitor/iob.json oref0-predict/oref0.json
do-everything = ! bash -c "openaps preflight && openaps gather-clean-data && openaps do-oref0 && openaps enact-oref0 && cat oref0-enacted/enacted-temp-basal.json"
upload-treatments = ! bash -c "openaps gather-pump-data && openaps report invoke nightscout/recent-treatments.json nightscout/uploaded.json"
report-nightscout = report invoke nightscout/preflight.json nightscout/recent-treatments.json nightscout/uploaded.json nightscout/recent-missing-entries.json nightscout/uploaded-entries.json nightscout/openaps-status.json nightscout/uploaded-recent-devicestatus.json
get-ns-cgm = ! bash -c "openaps report invoke nightscout/ns-glucose.json && cat nightscout/ns-glucose.json | json -e \"this.glucose = this.sgv\" > monitor/glucose.json"
ns-gather-clean-data = ! bash -c "openaps get-ns-cgm && openaps gather-pump-data"
ns-do-everything = ! bash -c "openaps ns-gather-clean-data && openaps do-oref0 && openaps enact-oref0 && cat oref0-enacted/enacted-temp-basal.json"
report-ns = report invoke nightscout/recent-treatments.json nightscout/uploaded.json nightscout/openaps-status.json nightscout/uploaded-recent-devicestatus.json
ns-loop = ! bash -c "openaps preflight && openaps report invoke nightscout/preflight.json && openaps ns-do-everything && (echo UPLOAD to Nightscout; openaps report-ns)"
loop = ! bash -c "openaps do-everything && (openaps ifonline && (echo FULL UPLOAD to Nightscout; openaps report-nightscout) || echo ERROR: working OFFLINE $(date))"
scan-cgm = report invoke raw-cgm/scan.json
dmloop = !bash -c "(echo TUNING; (openaps use pump mmtune > /dev/null) && echo TI STICK OK || echo ERROR: TI STICK FAIL $(date)) && (openaps scan-cgm > /dev/null) && grep -q dev raw-cgm/scan.json && (echo CGM from attached Dexcom; openaps loop || echo ERROR: LOOP FAILED $(date)) || (openaps ifonline && (echo CGM data from Nightscout; openaps ns-loop || echo ERROR: NS-LOOP FAILED $(date)) || (echo ERROR: No CGM data available $(date); exit 1))"
enact-oref0 = !bash -c "(grep -q Off flag && (echo ENACT-OFF FLAG; grep -q rate oref0-predict/oref0.json)) && (echo SKIP ENACTING; cp oref0-predict/oref0.json oref0-enacted/enacted-temp-basal.json) || (echo INVOKE ENACTING; openaps report invoke oref0-enacted/enacted-temp-basal.json)"
set-flag = !bash -c "openaps ifnightscout && (echo Nightscout OK; (openaps use ns shell get treatments.json count=1\&find\[eventType\]=Announcement) > flag) || (echo ERROR: Nightscout NOT ACCESSIBLE $(date))"
ifonline = !bash -c "ping -qc 3 www.google.com >/dev/null"
ifnightscout = ! bash -c "(rm nightscout/preflight.json && openaps report invoke nightscout/preflight.json) > /dev/null && grep -q true nightscout/preflight.json"

[report "nightscout/preflight.json"]
oper = preflight
use = shell
reporter = JSON
json_default = True
device = ns
remainder = 

[report "raw-cgm/glucose-raw.json"]
device = cgm
count = 20
use = iter_glucose
reporter = JSON

[report "monitor/glucose.json"]
use = rezone
reporter = JSON
astimezone = True
date = timestamp dateString start_at end_at created_at system_time display_time
adjust = missing
input = raw-cgm/glucose-raw.json
device = tz
timezone = 

[report "nightscout/recent-missing-entries.json"]
oper = format-recent-type
use = shell
reporter = JSON
json_default = True
device = ns
remainder = tz entries monitor/glucose.json

[report "nightscout/uploaded-entries.json"]
oper = upload-non-empty-type
use = shell
reporter = JSON
json_default = True
device = ns
remainder = entries.json nightscout/recent-missing-entries.json

[device "ns-status"]
vendor = openaps.vendors.process
extra = ns-status.ini

[report "nightscout/openaps-status.json"]
device = ns-status
remainder = monitor/clock.json oref0-monitor/iob.json oref0-predict/oref0.json oref0-enacted/enacted-temp-basal.json monitor/battery.json monitor/reservoir.json monitor/status.json
use = shell
json_default = True
reporter = JSON

[report "nightscout/uploaded-recent-devicestatus.json"]
oper = upload
use = shell
reporter = JSON
json_default = True
device = ns
remainder = devicestatus.json nightscout/openaps-status.json

[report "nightscout/ns-glucose.json"]
oper = get
use = shell
reporter = JSON
json_default = True
device = ns
remainder = entries/sgv.json count=20

[report "raw-cgm/scan.json"]
device = cgm
use = scan
reporter = JSON

